generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  password      String
  name          String
  profile       Profile?
  healthProfile HealthProfile?
  reports       Report[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Profile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  name         String
  dateOfBirth  DateTime
  gender       String
  height       Float
  weight       Float
  bloodType    String
  allergies    String
  medications  String
}

model HealthProfile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  dateOfBirth  DateTime
  gender       String
  height       Float
  weight       Float
  bloodType    String
  allergies    String
  medications  String
}

model Report {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userId          String       @db.ObjectId
  user            User         @relation(fields: [userId], references: [id])
  filePath        String
  fileName        String
  uploadDate      DateTime     @default(now())
  labName         String?
  reportId        String?
  collectionDate  DateTime?
  processed       Boolean      @default(false)
  patientInfo     PatientInfo?
  testResults     TestResult[]
  recommendations Specialist[]
}

model PatientInfo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  reportId    String  @unique @db.ObjectId
  report      Report  @relation(fields: [reportId], references: [id])
  name        String?
  age         Int?
  gender      String?
}

model TestResult {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  reportId      String  @db.ObjectId
  report        Report  @relation(fields: [reportId], references: [id])
  testName      String
  value         Float
  unit          String?
  normalRangeMin Float?
  normalRangeMax Float?
  isAbnormal    Boolean
  status        String // 'High', 'Low', 'Normal'
  createdAt     DateTime @default(now())
}

model Specialist {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  reportId    String @db.ObjectId
  report      Report @relation(fields: [reportId], references: [id])
  name        String
  reason      String?
}